#' @param maxage age at which egos depart model - either 45 or 65
#' @param casual_ages_restricted dist of expected mean degree using age-restricted alter set
#' @param casual_ages_all dist of exp mean degree using all reported alters
#'
#' @import ggplot2
#' @export
casual_dist <- function(x, maxage, casual_ages_restricted, casual_ages_all, categorical=FALSE){
if (categorical==TRUE){
nsims <- x$control$nsims
rels <- active_rels(x)
open_pop_counts <- get_agedist(x, categorical=TRUE)
m <- rels[[2]]
ages <- c(m$age1, m$age2)
if (maxage==45){
ages <- cut(ages, c(15, 20, 25, 30, 35, 40, 45), right=F)
}
if (maxage==65){
ages <- ages[ages<45]
ages <- cut(ages, c(15, 20, 25, 30, 35, 40, 45), right=F)
}
tab <- table(ages)/nsims
allages <- c(15, 20, 25, 30, 35, 40)
ma <- marcoh_ages_restricted[,2][[1]]
ma2 <- marcoh_ages_all[,2][[1]]
open_marcoh_meandeg <- tab/open_pop_counts
open_casual <- as.data.frame(cbind(allages, ma, ma2, open_marcoh_meandeg))
colnames(open_casual) <- c("Ego Age", "Weighted Egodata - Restricted", "Weighted Egodata", "Final State of Network")
open_casual <- ggplot() +
geom_bar(data = open_casual, aes(x=`Ego Age`, y=`Final State of Network`, fill="Final State of Network"), stat = "identity",
fill="#999999") +
geom_point(open_casual, mapping=aes(x=`Ego Age`, y=`Weighted Egodata - Restricted`, color="Weighted Egodata - Restricted"))  +
geom_point(open_casual, mapping=aes(x=`Ego Age`, y=`Weighted Egodata`, color="Weighted Egodata")) +
xlab("Ego Age") +
ylab("Mean Degree") +
ggtitle("Mean Degree of Casuals by Ego Age") +
scale_color_manual(name = "Egodata",
labels = c("Weighted Egodata", "Weighted Egodata, All Alters"),
values = c("darkblue", "darkred"))
} else {
nsims <- x$control$nsims
rels <- active_rels(x)
open_pop_counts <- get_agedist(x)
m <- rels[[2]]
ages <- c(m$age1, m$age2)
if (maxage==65){
ages <- ages[ages<45]
open_pop_counts <- open_pop_counts[which(as.numeric(names(open_pop_counts))<45)]
}
tab <- table(ages)
if(length(tab) < length(open_pop_counts)){
missing <- setdiff(as.numeric(names(open_pop_counts)), as.numeric(names(tab)))
if (missing==15){
tab <- c(0,tab)
}
}
tab <- tab/nsims
allages <- 15:44
ma <- marcoh_ages_restricted[,2][[1]]
ma2 <- marcoh_ages_all[,2][[1]]
open_marcoh_meandeg <- tab/open_pop_counts
open_casual <- as.data.frame(cbind(allages, ma, ma2, open_marcoh_meandeg))
colnames(open_casual) <- c("Ego Age", "Weighted Egodata - Restricted", "Weighted Egodata", "Final State of Network")
open_plot <- ggplot() +
geom_bar(data = open_casual, aes(x=`Ego Age`, y=`Final State of Network`, fill="Final State of Network"), stat = "identity",
fill="#999999") +
geom_point(open_casual, mapping=aes(x=`Ego Age`, y=`Weighted Egodata - Restricted`, color="Weighted Egodata - Restricted"))  +
geom_point(open_casual, mapping=aes(x=`Ego Age`, y=`Weighted Egodata`, color="Weighted Egodata"))+
xlab("Ego Age") +
ylab("Mean Degree") +
ggtitle("Mean Degree of Casuals by Ego Age") +
scale_color_manual(name = "Egodata",
labels = c("Weighted Egodata", "Weighted Egodata, All Alters"),
values = c("darkblue", "darkred"))
}
dat <- list(open_plot, open_casual)
return(dat)
}
c <- casual_dist(x, 65, dat_cat[[3]], dat_cat[[4]], categorical = TRUE)
#' then takes that distribution and plots it under the expected distribution based on
#' the egodata. The exported object includes both the ggplot object and the raw data.
#'
#' @param x network simulation object
#' @param maxage age at which egos depart model - either 45 or 65
#' @param casual_ages_restricted dist of expected mean degree using age-restricted alter set
#' @param casual_ages_all dist of exp mean degree using all reported alters
#'
#' @import ggplot2
#' @export
casual_dist <- function(x, maxage, casual_ages_restricted, casual_ages_all, categorical=FALSE){
if (categorical==TRUE){
nsims <- x$control$nsims
rels <- active_rels(x)
open_pop_counts <- get_agedist(x, categorical=TRUE)
m <- rels[[2]]
ages <- c(m$age1, m$age2)
if (maxage==45){
ages <- cut(ages, c(15, 20, 25, 30, 35, 40, 45), right=F)
}
if (maxage==65){
ages <- ages[ages<45]
ages <- cut(ages, c(15, 20, 25, 30, 35, 40, 45), right=F)
}
tab <- table(ages)/nsims
allages <- c(15, 20, 25, 30, 35, 40)
ma <- marcoh_ages_restricted[,2][[1]]
ma2 <- marcoh_ages_all[,2][[1]]
open_marcoh_meandeg <- tab/open_pop_counts
open_casual <- as.data.frame(cbind(allages, ma, ma2, open_marcoh_meandeg))
colnames(open_casual) <- c("Ego Age", "Weighted Egodata - Restricted", "Weighted Egodata", "Final State of Network")
open_plot <- ggplot() +
geom_bar(data = open_casual, aes(x=`Ego Age`, y=`Final State of Network`, fill="Final State of Network"), stat = "identity",
fill="#999999") +
geom_point(open_casual, mapping=aes(x=`Ego Age`, y=`Weighted Egodata - Restricted`, color="Weighted Egodata - Restricted"))  +
geom_point(open_casual, mapping=aes(x=`Ego Age`, y=`Weighted Egodata`, color="Weighted Egodata")) +
xlab("Ego Age") +
ylab("Mean Degree") +
ggtitle("Mean Degree of Casuals by Ego Age") +
scale_color_manual(name = "Egodata",
labels = c("Weighted Egodata", "Weighted Egodata, All Alters"),
values = c("darkblue", "darkred"))
} else {
nsims <- x$control$nsims
rels <- active_rels(x)
open_pop_counts <- get_agedist(x)
m <- rels[[2]]
ages <- c(m$age1, m$age2)
if (maxage==65){
ages <- ages[ages<45]
open_pop_counts <- open_pop_counts[which(as.numeric(names(open_pop_counts))<45)]
}
tab <- table(ages)
if(length(tab) < length(open_pop_counts)){
missing <- setdiff(as.numeric(names(open_pop_counts)), as.numeric(names(tab)))
if (missing==15){
tab <- c(0,tab)
}
}
tab <- tab/nsims
allages <- 15:44
ma <- marcoh_ages_restricted[,2][[1]]
ma2 <- marcoh_ages_all[,2][[1]]
open_marcoh_meandeg <- tab/open_pop_counts
open_casual <- as.data.frame(cbind(allages, ma, ma2, open_marcoh_meandeg))
colnames(open_casual) <- c("Ego Age", "Weighted Egodata - Restricted", "Weighted Egodata", "Final State of Network")
open_plot <- ggplot() +
geom_bar(data = open_casual, aes(x=`Ego Age`, y=`Final State of Network`, fill="Final State of Network"), stat = "identity",
fill="#999999") +
geom_point(open_casual, mapping=aes(x=`Ego Age`, y=`Weighted Egodata - Restricted`, color="Weighted Egodata - Restricted"))  +
geom_point(open_casual, mapping=aes(x=`Ego Age`, y=`Weighted Egodata`, color="Weighted Egodata"))+
xlab("Ego Age") +
ylab("Mean Degree") +
ggtitle("Mean Degree of Casuals by Ego Age") +
scale_color_manual(name = "Egodata",
labels = c("Weighted Egodata", "Weighted Egodata, All Alters"),
values = c("darkblue", "darkred"))
}
dat <- list(open_plot, open_casual)
return(dat)
}
c <- casual_dist(x, 65, dat_cat[[3]], dat_cat[[4]], categorical = TRUE)
plot(c[[1]])
#' then takes that distribution and plots it under the expected distribution based on
#' the egodata. The exported object includes both the ggplot object and the raw data.
#'
#' @param x network simulation object
#' @param maxage age at which egos depart model - either 45 or 65
#' @param casual_ages_restricted dist of expected mean degree using age-restricted alter set
#' @param casual_ages_all dist of exp mean degree using all reported alters
#'
#' @import ggplot2
#' @export
casual_dist <- function(x, maxage, casual_ages_restricted, casual_ages_all, categorical=FALSE){
if (categorical==TRUE){
nsims <- x$control$nsims
rels <- active_rels(x)
open_pop_counts <- get_agedist(x, categorical=TRUE)
m <- rels[[2]]
ages <- c(m$age1, m$age2)
if (maxage==45){
ages <- cut(ages, c(15, 20, 25, 30, 35, 40, 45), right=F)
}
if (maxage==65){
ages <- ages[ages<45]
ages <- cut(ages, c(15, 20, 25, 30, 35, 40, 45), right=F)
}
tab <- table(ages)/nsims
allages <- c(15, 20, 25, 30, 35, 40)
ma <- casual_ages_restricted[,2][[1]]
ma2 <- casual_ages_all[,2][[1]]
open_marcoh_meandeg <- tab/open_pop_counts
open_casual <- as.data.frame(cbind(allages, ma, ma2, open_marcoh_meandeg))
colnames(open_casual) <- c("Ego Age", "Weighted Egodata - Restricted", "Weighted Egodata", "Final State of Network")
open_plot <- ggplot() +
geom_bar(data = open_casual, aes(x=`Ego Age`, y=`Final State of Network`, fill="Final State of Network"), stat = "identity",
fill="#999999") +
geom_point(open_casual, mapping=aes(x=`Ego Age`, y=`Weighted Egodata - Restricted`, color="Weighted Egodata - Restricted"))  +
geom_point(open_casual, mapping=aes(x=`Ego Age`, y=`Weighted Egodata`, color="Weighted Egodata")) +
xlab("Ego Age") +
ylab("Mean Degree") +
ggtitle("Mean Degree of Casuals by Ego Age") +
scale_color_manual(name = "Egodata",
labels = c("Weighted Egodata", "Weighted Egodata, All Alters"),
values = c("darkblue", "darkred"))
} else {
nsims <- x$control$nsims
rels <- active_rels(x)
open_pop_counts <- get_agedist(x)
m <- rels[[2]]
ages <- c(m$age1, m$age2)
if (maxage==65){
ages <- ages[ages<45]
open_pop_counts <- open_pop_counts[which(as.numeric(names(open_pop_counts))<45)]
}
tab <- table(ages)
if(length(tab) < length(open_pop_counts)){
missing <- setdiff(as.numeric(names(open_pop_counts)), as.numeric(names(tab)))
if (missing==15){
tab <- c(0,tab)
}
}
tab <- tab/nsims
allages <- 15:44
ma <- casual_ages_restricted[,2][[1]]
ma2 <- casual_ages_all[,2][[1]]
open_marcoh_meandeg <- tab/open_pop_counts
open_casual <- as.data.frame(cbind(allages, ma, ma2, open_marcoh_meandeg))
colnames(open_casual) <- c("Ego Age", "Weighted Egodata - Restricted", "Weighted Egodata", "Final State of Network")
open_plot <- ggplot() +
geom_bar(data = open_casual, aes(x=`Ego Age`, y=`Final State of Network`, fill="Final State of Network"), stat = "identity",
fill="#999999") +
geom_point(open_casual, mapping=aes(x=`Ego Age`, y=`Weighted Egodata - Restricted`, color="Weighted Egodata - Restricted"))  +
geom_point(open_casual, mapping=aes(x=`Ego Age`, y=`Weighted Egodata`, color="Weighted Egodata"))+
xlab("Ego Age") +
ylab("Mean Degree") +
ggtitle("Mean Degree of Casuals by Ego Age") +
scale_color_manual(name = "Egodata",
labels = c("Weighted Egodata", "Weighted Egodata, All Alters"),
values = c("darkblue", "darkred"))
}
dat <- list(open_plot, open_casual)
return(dat)
}
c <- casual_dist(x, 65, dat_cat[[3]], dat_cat[[4]], categorical = TRUE)
plot(c[[1]])
c <- casual_dist(x, 65, dat[[3]], dat[[4]])
plot(c[[1]])
devtools::install()
d <- nocrossterms_nooffset_no65_debut_nocorrections
d <- d$cel.complete
d <- nocrossterms_nooffset_no65_debut_nocorrections
d <- within(d, rm(cel.complete))
d
d <- list(d$param, d$control, d$nwparam, d$epi, d$stats, d$el, d$attr, d$cel.temp)
class(d) <- "netsim"
d <- nocrossterms_nooffset_no65_debut_nocorrections
d <- list(d$param, d$control, d$nwparam, d$epi, d$stats, d$el, d$attr, d$cel.temp)
class(d) <- "netsim"
nocrossterms_nooffset_no65_debut_nocorrections <- d
usethis::use_data(nocrossterms_nooffset_no65_debut_nocorrections)
usethis::use_data(nocrossterms_nooffset_no65_debut_nocorrections, overwrite = TRUE)
d <- nocrossterms_nooffset_yes65_debut_nocorrections
d <- list(d$param, d$control, d$nwparam, d$epi, d$stats, d$el, d$attr, d$cel.temp)
class(d) <- "netsim"
nocrossterms_nooffset_yes65_debut_nocorrections <- d
usethis::use_data(nocrossterms_nooffset_yes65_debut_nocorrections)
ls(nocrossterms_nooffset_no65_debut_nocorrections)
class(nocrossterms_nooffset_yes65_debut_nocorrections)
ls(nocrossterms_nooffset_no65_debut_nocorrections)
load("~/ddaf/data/nocrossterms_yesoffset_no65_debut_edapprox.rda")
class(nocrossterms_yesoffset_no65_debut_edapprox$param)
class(nocrossterms_yesoffset_no65_debut_edapprox$control)
class(nocrossterms_yesoffset_no65_debut_edapprox$nwparam)
class(nocrossterms_yesoffset_no65_debut_edapprox$epi)
class(nocrossterms_yesoffset_no65_debut_edapprox$stats)
class(nocrossterms_yesoffset_no65_debut_edapprox$el)
class(nocrossterms_yesoffset_no65_debut_edapprox$attr)
class(nocrossterms_yesoffset_no65_debut_edapprox$cel.temp)
class(nocrossterms_yesoffset_no65_debut_edapprox$cel.complete)
p <- nocrossterms_yesoffset_no65_debut_edapprox$param
p
x <- nocrossterms_yesoffset_no65_debut_edapprox
x$stats
x$stats[[1]]$nwstats
names(x)
test <- list()
test$param <- x$param
test$control <- x$control
test$nwparam <- x$nwparam
test$epi <- x$epi
test$el <- x$el
test$attr <- <- x$attr
test$cel.temp <- x$cel.temp
class(test) <- "netsim"
test$attr <- x$attr
names(x$attr)
names(x$attr[[1]])
x$attr[[i]][1]
x$attr[[1]][1]
x$attr[[1]][1:11]
names(x$epi[[i]])
names(x$epi[[1]])
names(x$epi[[1]]$sim1)
names(x$epi)
keep <- c("num", "num.male", "num.feml", "meanAge", "propMale", "b.flow", "ds.flow", "marcoh.departed", "other.departed", "debutprop",
"coef.form.marcoh", "coef.form.casual", "meanDegMarcoh", "meanDegOther", "marcoh", "other", "other.new", "other.end",
"marcoh.new", "marcoh.end")
x$epi[keep]
test <- list()
test$param <- x$param
test$control <- x$control
test$nwparam <- x$nwparam
keep <- c("num", "num.male", "num.feml", "meanAge", "propMale", "b.flow", "ds.flow", "marcoh.departed", "other.departed", "debutprop",
"coef.form.marcoh", "coef.form.casual", "meanDegMarcoh", "meanDegOther", "marcoh", "other", "other.new", "other.end",
"marcoh.new", "marcoh.end")
test$epi <- x$epi[keep]
test$el <- x$el
for (i in 1:x$control$nsims){
x$attr[[i]] <- x$attr[[i]][1:11]
}
test$attr <- x$attr
test$cel.temp <- x$cel.temp
class(test) <- "netsim"
make_small_netsim <- function(x){
out <- list()
out$param <- x$param
out$control <- x$control
out$nwparam <- x$nwparam
keep <- c("num", "num.male", "num.feml", "meanAge", "propMale", "b.flow", "ds.flow", "marcoh.departed", "other.departed", "debutprop",
"coef.form.marcoh", "coef.form.casual", "meanDegMarcoh", "meanDegOther", "marcoh", "other", "other.new", "other.end",
"marcoh.new", "marcoh.end")
out$epi <- x$epi[keep]
out$el <- x$el
for (i in 1:x$control$nsims){
x$attr[[i]] <- x$attr[[i]][1:11]
}
out$attr <- x$attr
out$cel.temp <- x$cel.temp
class(out) <- "netsim"
return(out)
}
sim_5_5200_offest <- readRDS("~/Dissertation/Duration_Simulations/sims/July2020/partner_corrections/sim_5_5200_offest.rds")
# in "july2020" "partner corrections"
yescrossterms_yesoffset_no65_eligible_nocorrections <- make_small_netsim(sim_5_5200_offest)
sim_5_5200_offest <- readRDS("~/Dissertation/Duration_Simulations/sims/July2020/partner_corrections/sim_5_5200_offest.rds")
#' @title Netsim Size Reduction
#'
#' @description Take objects and remove the cel.complete and misc variables I don't currently need
#'
#' @param x is the netsim output
#' @export
#'
make_small_netsim <- function(x){
out <- list()
out$param <- x$param
out$control <- x$control
out$nwparam <- x$nwparam
keep <- c("num", "num.male", "num.feml", "meanAge", "propMale", "b.flow", "ds.flow", "marcoh.departed", "other.departed", "debutprop",
"coef.form.marcoh", "coef.form.casual", "meanDegMarcoh", "meanDegOther", "marcoh", "other", "other.new", "other.end",
"marcoh.new", "marcoh.end")
out$epi <- x$epi[keep]
out$el <- x$el
for (i in 1:x$control$nsims){
x$attr[[i]] <- x$attr[[i]][1:11]
}
out$attr <- x$attr
out$cel.temp <- x$cel.temp
class(out) <- "netsim"
return(out)
}
# in "july2020" "partner corrections"
yescrossterms_yesoffset_no65_eligible_nocorrections <- make_small_netsim(sim_5_5200_offest)
class(sim_5_5200_offest
)
class(yescrossterms_yesoffset_no65_eligible_nocorrections)
usethis::use_data(yescrossterms_yesoffset_no65_eligible_nocorrections)
sim_5_5200_offest_65 <- readRDS("~/Dissertation/Duration_Simulations/sims/July2020/partner_corrections/sim_5_5200_offest_65.rds")
yescrossterms_yesoffset_yes65_eligible_nocorrections <- make_small_netsim(sim_5_5200_offest_65)
usethis::use_data(yescrossterms_yesoffset_yes65_eligible_nocorrections)
sim_5_5200_offest_nocross <- readRDS("~/Dissertation/Duration_Simulations/sims/July2020/partner_corrections/nocross/sim_5_5200_offest_nocross.rds")
nocrossterms_yesoffset_no65_eligible_nocorrections <- make_small_netsim(sim_5_5200_offest_nocross)
usethis::use_data(nocrossterms_yesoffset_no65_eligible_nocorrections)
sim_5_5200_og <- readRDS("~/Dissertation/Duration_Simulations/sims/July2020/debut/sim_5_5200_og.rds")
yescrossterms_nooffset_no65_debut_nocorrections <- make_small_netsim(sim_5_5200_og)
usethis::use_data(yescrossterms_nooffset_no65_debut_nocorrections)
sim_5_5200_nocross <- readRDS("~/Dissertation/Duration_Simulations/sims/July2020/debut/sim_5_5200_nocross.rds")
nocrossterms_nooffset_no65_debut_nocorrections <- make_small_netsim(sim_5_5200_nocross)
usethis::use_data(nocrossterms_nooffset_no65_debut_nocorrections)
sim_5_5200_nocross_offset <- readRDS("~/Dissertation/Duration_Simulations/sims/July2020/debut/sim_5_5200_nocross_offset.rds")
nocrossterms_yesoffset_no65_debut_nocorrections <- make_small_netsim(sim_5_5200_nocross_offset)
usethis::use_data(nocrossterms_yesoffset_no65_debut_nocorrections)
sim_5_5200_nocross_offset_edapprox <- readRDS("~/Dissertation/Duration_Simulations/sims/July2020/debut/sim_5_5200_nocross_offset_edapprox.rds")
nocrossterms_yesoffset_no65_debut_edapprox <- make_small_netsim(sim_5_5200_nocross_offset_edapprox)
usethis::use_data(nocrossterms_yesoffset_no65_debut_edapprox)
sim_5_5200_nocross_offset_65 <- readRDS("~/Dissertation/Duration_Simulations/sims/July2020/debut/sim_5_5200_nocross_offset_65.rds")
nocrossterms_yesoffset_yes65_debut_nocorrections <- make_small_netsim(sim_5_5200_nocross_offset_65)
usethis::use_data(nocrossterms_yesoffset_yes65_debut_nocorrections)
devtools::document()
rm(list = c("make_small_netsim"))`
rm(list = c("make_small_netsim"))
devtools::install()
library(ddaf)
library(ddaf)
library(statnet.common)
library(network)
library(ergm)
library(here)
require(ergm.ego)
require(parallel)
egodat_marcoh <- readRDS(here("data", "egodat_marcoh.rds"))
egodat_other <- readRDS(here("data", "egodat_other.rds"))
setwd("~/Dissertation/Duration_Simulations")
egodat_marcoh <- readRDS(here("data", "egodat_marcoh.rds"))
egodat_other <- readRDS(here("data", "egodat_other.rds"))
here()
egodat_marcoh <- readRDS("~/Dissertation/Duration_Simulations/data/egodat_marcoh.rds")
egodat_other <- readRDS("~/Dissertation/Duration_Simulations/data/egodat_other.rds")
egodat_marcoh$egos$age_factor <- as.factor(egodat_marcoh$egos$age)
egodat_other$egos$age_factor <- as.factor(egodat_marcoh$egos$age)
fit.marcoh.offset.nf <- ergm.ego(egodat_marcoh ~ edges +
nodecov("age") +
nodecov("agesquared") +
absdiff("sqrtage") +
#nodefactor("age_factor", levels="18") +
offset(nodematch("male", diff = FALSE)) +
offset(nodefactor("debuted", levels=1)) +
offset(nodefactor("olderpartnerM")) +
offset("concurrent"),
offset.coef = c(-Inf, -Inf, -Inf, -Inf),
control = control.ergm.ego(ppop.wt = "sample",
ppopsize = 50000,
ergm.control = control.ergm(MCMLE.effectiveSize=NULL,
MCMC.interval = 5e5,
MCMC.samplesize = 5000,
MCMC.burnin = 5e5,
MCMLE.maxit = 4000,
parallel = 16,
parallel.type= "PSOCK")))
sim_10_5200_offest_eligible_nocross <- readRDS("~/Dissertation/Duration_Simulations/sims/July2020/partner_corrections/sim_10_5200_offest_eligible_nocross.rds")
x <- sim_10_5200_offest_eligible_nocross
x$epi$effectivedebutprop
make_small_netsim()
make_small_netsim
#' @title Netsim Size Reduction
#'
#' @description Take objects and remove the cel.complete and misc variables I don't currently need
#'
#' @param x is the netsim output
#' @export
#'
make_small_netsim <- function(x){
out <- list()
out$param <- x$param
out$control <- x$control
out$nwparam <- x$nwparam
keep <- c("num", "num.male", "num.feml", "meanAge", "propMale", "b.flow", "ds.flow", "marcoh.departed", "other.departed", "debutprop",
"coef.form.marcoh", "coef.form.casual", "meanDegMarcoh", "meanDegOther", "marcoh", "other", "other.new", "other.end",
"marcoh.new", "marcoh.end", "effectivedebutprop")
out$epi <- x$epi[keep]
out$el <- x$el
for (i in 1:x$control$nsims){
x$attr[[i]] <- x$attr[[i]][1:11]
}
out$attr <- x$attr
out$cel.temp <- x$cel.temp
class(out) <- "netsim"
return(out)
}
sim_10_5200_nocross_offset_extraeligible<- readRDS(here("sims", "July2020", "partner_corrections",  "sim_10_5200_offest_eligible_nocross.rds"))
nocrossterms_yesoffset_no65_debut_extraeligible <- make_small_netsim(sim_10_5200_nocross_offset_extraeligible)
saveRDS(nocrossterms_yesoffset_no65_debut_extraeligible, here("for_dissertation", "10sims", "nocrossterms_yesoffset_no65_debut_extraeligible.rds"))
sim_10_1560_nocross_offset_debut_effectivedebutracking <- readRDS("~/Dissertation/Duration_Simulations/sims/July2020/debut/sim_10_1560_nocross_offset_debut_effectivedebutracking.rds")
apply(sim_10_1560_nocross_offset_debut_effectivedebutracking$epi$effectivedebutprop, 1, mean)
#' @title Netsim Size Reduction
#'
#' @description Take objects and remove the cel.complete and misc variables I don't currently need
#'
#' @param x is the netsim output
#' @export
#'
make_small_netsim <- function(x){
out <- list()
out$param <- x$param
out$control <- x$control
out$nwparam <- x$nwparam
keep <- c("num", "num.male", "num.feml", "meanAge", "propMale", "b.flow", "ds.flow", "marcoh.departed", "other.departed", "debutprop",
"coef.form.marcoh", "coef.form.casual", "meanDegMarcoh", "meanDegOther", "marcoh", "other", "other.new", "other.end",
"marcoh.new", "marcoh.end", "effectivedebutprop")
out$epi <- x$epi[keep]
out$el <- x$el
for (i in 1:x$control$nsims){
x$attr[[i]] <- x$attr[[i]][1:11]
}
out$attr <- x$attr
out$cel.temp <- x$cel.temp
class(out) <- "netsim"
return(out)
}
# some of these files say 10_1560 but it's really 10_3120 so correcting here
sim_10_3120_nocross_offset_eligible_effectivedebutracking <- readRDS("~/Dissertation/Duration_Simulations/sims/July2020/debut/sim_10_1560_nocross_offset_eligible_effectivedebutracking.rds")
nocrossterms_yesoffset_no65_eligible_withcorrections<- make_small_netsim(sim_10_1560_nocross_offset_eligible_effectivedebutracking)
nocrossterms_yesoffset_no65_eligible_withcorrections<- make_small_netsim(sim_10_3120_nocross_offset_eligible_effectivedebutracking)
saveRDS(nocrossterms_yesoffset_no65_eligible_withcorrections, here("for_dissertation", "10sims", "nocrossterms_yesoffset_no65_eligible_withcorrections.rds"))
# eligible - calibrated
sim_10_3120_nocross_offset_calibratedeligible_effectivedebutracking <- readRDS("~/Dissertation/Duration_Simulations/sims/July2020/debut/sim_10_1560_nocross_offset_calibratedeligible_effectivedebutracking.rds")
nocrossterms_yesoffset_no65_eligible_withcorrections<- make_small_netsim(sim_10_3120_nocross_offset_calibratedeligible_effectivedebutracking)
saveRDS(nocrossterms_yesoffset_no65_calibratedeligible_withcorrections, here("for_dissertation", "10sims", "nocrossterms_yesoffset_no65_calibratedeligible_withcorrections.rds"))
nocrossterms_yesoffset_no65_calibratedeligible_withcorrections <- make_small_netsim(sim_10_3120_nocross_offset_calibratedeligible_effectivedebutracking)
saveRDS(nocrossterms_yesoffset_no65_calibratedeligible_withcorrections, here("for_dissertation", "10sims", "nocrossterms_yesoffset_no65_calibratedeligible_withcorrections.rds"))
# debut with nodefactor
sim_10_3120_nocross_offset_debut_youngboost_effectivedebutracking <- readRDS("~/Dissertation/Duration_Simulations/sims/July2020/debut/sim_10_1560_nocross_offset_nodefactor_effectivedebutracking.rds")
nocrossterms_yesoffset_no65_debut_nodefactor_withcorrections <- make_small_netsim(sim_10_3120_nocross_offset_debut_youngboost_effectivedebutracking)
saveRDS(nocrossterms_yesoffset_no65_debut_nodefactor_withcorrections, here("for_dissertation", "10sims", "nocrossterms_yesoffset_no65_debut_nodefactor_withcorrections.rds"))
=======
if (maxage==65){
m <- active[[1]]
m_young <- m[which(
(m$age1 >= 45 & m$age2 <45) |
(m$age1 < 45 & m$age2 >= 45) |
(m$age1 < 45 & m$age2 < 45)),]
c <- active[[2]]
c_young <- c[which(
(c$age1 >= 45 & c$age2 <45) |
(c$age1 < 45 & c$age2 >= 45) |
(c$age1 < 45 & c$age2 < 45)),]
mean_m_active <- round(mean(m_young$len))
mean_c_active <- round(mean(c_young$len))
}
dat <- as.data.frame(matrix(c(target_m, mean_m_active, target_c, mean_c_active), nrow=2, byrow = T))
dat
row.names(dat) <- c("Marriage/Cohab", "Casual")
dat$`Pct Off` <-
colnames(dat) <- c("Target", "Simulation")
dat
dat$`Pct Off` <- round(((dat$Target-dat$Simulation)/dat$Target)*100, 2)
dat
dat$`Pct Off` <- round(((dat$Simulation-dat$Target)/dat$Target)*100, 2)
dat
devtools::install()
devtools::install()
library(ddaf)
